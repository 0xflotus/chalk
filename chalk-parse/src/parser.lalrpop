use ast::*;
use lalrpop_intern::intern;

grammar;

pub Program: Program = {
    Item+ => Program { items: <> },
};

Item: Item = {
    <a:Application> "." => Item::Fact(a),
    Rule => Item::Rule(<>),
};

Rule: Rule = {
    <a:Application> ":-" <f:Fact> "." => Rule {
        consequence: a,
        condition: f
    },
};

Fact: Fact = {
    FactAnd
};

FactAnd: Fact = {
    FactOr,
    <l:FactAnd> ";" <r:FactOr> => Fact { data: Box::new(FactData::And(l, r)) },
};

FactOr: Fact = {
    FactFunc,
    <l:FactOr> "," <r:FactFunc> => Fact { data: Box::new(FactData::Or(l, r)) },
};

FactFunc: Fact = {
    <l:FactApply> "=>" <r:FactFunc> => Fact { data: Box::new(FactData::Implication(l, r)) },
    "exists" <v:Variable> "->" <b:FactFunc> => Fact { data: Box::new(FactData::Exists(v, b)) },
    "forall" <v:Variable> "->" <b:FactFunc> => Fact { data: Box::new(FactData::ForAll(v, b)) },
    <v:Variable> "->" <b:FactFunc> => Fact { data: Box::new(FactData::Lambda(v, b)) },
};

FactApply: Fact = {
    Application => Fact { data: Box::new(FactData::Apply(<>)) }
};

Application: Application = {
    Bit+ => Application { bits: <> },
};

Bit: Bit = {
    r"[A-Za-z0-9_]+:" => Bit::Operator(Operator { id: intern(<>) }),
    r"[-!@#$%^&*=+/?~\\;,.]+" => Bit::Operator(Operator { id: intern(<>) }),
    r"[a-z_][_A-Za-z0-9]*" => Bit::Atom(Atom { id: intern(<>) }),
    Variable => Bit::Variable(<>),
    "[" <Fact> "]" => Bit::Paren(Box::new(<>)),
};

Variable: Variable = {
    r"[A-Z][_A-Za-z0-9]*" => Variable { id: intern(<>) },
};
