use ast::*;
use lalrpop_intern::{intern, InternedString};
use std::iter::once;

grammar;

pub Program: Program = {
    Item+ => Program { items: <> },
};

Item: Item = {
    <a:Application> "." => Item::Fact(a),
    Rule => Item::Rule(<>),
};

Rule: Rule = {
    <a:Application> ":-" <f:Fact> "." => Rule {
        consequence: a,
        condition: f
    },
};

Fact: Fact = {
    FactAnd
};

FactAnd: Fact = {
    FactOr,
    <l:FactAnd> ";" <r:FactOr> => Fact { data: Box::new(FactData::And(l, r)) },
};

FactOr: Fact = {
    FactFunc,
    <l:FactOr> "," <r:FactFunc> => Fact { data: Box::new(FactData::Or(l, r)) },
};

FactFunc: Fact = {
    FactApply,
    <l:FactApply> "=>" <r:FactFunc> =>
        Fact { data: Box::new(FactData::Implication(l, r)) },
    "exists" "(" <v:Variable> "->" <b:FactFunc> ")" =>
        Fact { data: Box::new(FactData::Exists(v, b)) },
    "forall" "(" <v:Variable> "->" <b:FactFunc> ")" =>
        Fact { data: Box::new(FactData::ForAll(v, b)) },
};

FactApply: Fact = {
    Application => Fact { data: Box::new(FactData::Apply(<>)) }
};

Application: Application = {
    <head:Value> => {
        Application {
            bits: vec![Bit::Value(head)]
        }
    },
    <tail:Operator> => {
        Application {
            bits: vec![Bit::Operator(tail)]
        }
    },
    <head:Value?> <body:(Operator Value)+> <tail:Operator?> => {
        Application {
            bits: head.into_iter().map(Bit::Value)
                                  .chain(body.into_iter().flat_map(|(o, v)| {
                                      once(Bit::Operator(o)).chain(once(Bit::Value(v)))
                                  }))
                                  .chain(tail.into_iter().map(Bit::Operator))
                                  .collect()
        }
    },
    <id:Identifier> "(" <appls:Applications> ")" => {
        let oper_bit = Bit::Operator(Operator::Parens(id));
        let appl_bits = appls.into_iter().map(Value::Application).map(Bit::Value);
        Application {
            bits: Some(oper_bit).into_iter().chain(appl_bits).collect()
        }
    },
};

Applications: Vec<Application> = {
    Application => vec![<>],
    <appls:Applications> "," <appl:Application> => {
        let mut appls = appls;
        appls.push(appl);
        appls
    },
    <appls:Applications> "," => appls,
};

OperatorValue: (Operator, Value) = {
    Operator Value => (<>),
};

Operator: Operator = {
    r"[A-Za-z][A-Za-z0-9_]*:" => Operator::Colon(intern(<>)),
    r"[-|!@#$%^&*=+/:?~<>]+" => Operator::Symbols(intern(<>)),
};

Value: Value = {
    Atom => Value::Atom(<>),
    Variable => Value::Variable(<>),
    "(" <Application> ")" => Value::Application(<>),
    "_" => Value::Wildcard,
};

Atom: Atom = {
    <s:r"'[^']+'"> => Atom { id: intern(&s[1..s.len() - 1]) },
};

Variable: Variable = {
    Identifier => Variable { id: <> },
};

Identifier: InternedString = {
    r"[A-Za-z][A-Za-z0-9_]*" => intern(<>),
};

