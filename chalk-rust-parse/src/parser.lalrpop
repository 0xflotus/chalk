use ast::*;
use lalrpop_intern::intern;

grammar;

pub Program: Program = {
    Item* => Program { items: <> }
};

Item: Item = {
    StructDefn => Item::StructDefn(<>),
    TraitDefn => Item::TraitDefn(<>),
    Impl => Item::Impl(<>),
};

pub Goal: Box<Goal> = {
    Goal1,
    <g1:Goal1> "," <g2:Goal> => Box::new(Goal::And(g1, g2)),
};

Goal1: Box<Goal> = {
    "forall" "<" <p:Comma<ParameterKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::ForAll(p, g)),
    "exists" "<" <p:Comma<ParameterKind>> ">" "{" <g:Goal> "}" => Box::new(Goal::Exists(p, g)),
    "if" "(" <w:Comma<WhereClause>> ")" "{" <g:Goal> "}" => Box::new(Goal::Implies(w, g)),
    <w:WhereClause> => Box::new(Goal::Leaf(w)),
};

StructDefn: StructDefn = {
    "struct" <n:Id><p:Angle<ParameterKind>> <w:WhereClauses> "{" "}" => StructDefn {
        name: n,
        parameter_kinds: p,
        where_clauses: w
    }
};

TraitDefn: TraitDefn = {
    "trait" <n:Id><p:Angle<ParameterKind>> <w:WhereClauses> "{" <a:AssocTyName*> "}" => TraitDefn {
        name: n,
        parameter_kinds: p,
        where_clauses: w,
        assoc_ty_names: a,
    }
};

AssocTyName: Identifier = {
    "type" <Id> ";"
};

Impl: Impl = {
    "impl" <p:Angle<ParameterKind>> <t:Id> <a:Angle<Ty>> "for" <s:Ty> <w:WhereClauses> "{"
        <assoc:AssocTyValue*>"}" =>
    {
        let mut args = vec![s];
        args.extend(a);
        Impl {
            parameter_kinds: p,
            trait_ref: TraitRef { trait_name: t, args: args },
            where_clauses: w,
            assoc_ty_values: assoc,
        }
    },
};

ParameterKind: ParameterKind = {
    Id => ParameterKind::Ty(<>),
};

AssocTyValue: AssocTyValue = {
    "type" <n:Id> "=" <v:Ty> ";" => AssocTyValue {
        name: n,
        value: v,
    },
};

pub Ty: Ty = {
    <n:Id> => Ty::Id { name: n},
    <n:Id> "<" <a:Comma<Ty>> ">" => Ty::Apply { name: n, args: a },
    <p:ProjectionTy> => Ty::Projection { proj: p },
};

ProjectionTy: ProjectionTy = {
    "<" <t:TraitRef<"as">> ">" "::" <n:Id> => ProjectionTy {
        trait_ref: t, name: n
    },
};

WhereClauses: Vec<WhereClause> = {
    "where" <Comma<WhereClause>>,
    () => vec![],
};

WhereClause: WhereClause = {
    <t:TraitRef<":">> => WhereClause::Implemented { trait_ref: t },
    <p:ProjectionTy> "==" <t:Ty> => WhereClause::ProjectionEq { projection: p, ty: t },
};

TraitRef<S>: TraitRef = {
    <s:Ty> S <t:Id> <a:Angle<Ty>> => {
        let mut args = vec![s];
        args.extend(a);
        TraitRef {
            trait_name: t,
            args: args,
        }
    },
};

Comma<T>: Vec<T> = {
    Comma1<T>? => <>.unwrap_or(vec![])
};

Comma1<T>: Vec<T> = {
    <t:T> => vec![t],
    <v:Comma<T>> "," <t:T> => {
        let mut v = v;
        v.push(t);
        v
    }
};

Angle<T>: Vec<T> = {
    "<" <Comma<T>> ">",
    () => vec![],
};

Id: Identifier = {
    <l:@L> <s:r"([:alpha:]|_)([:alnum:]|_)*"> <r:@R> => Identifier {
        str: intern(s),
        span: Span::new(l, r),
    }
};
